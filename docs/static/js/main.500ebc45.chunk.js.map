{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","console","log","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","height","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","el","ReactDOM","render","document","getElementById"],"mappings":"qMA8BeA,EA3BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAgBzC,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAftB,SAACP,GACnBF,EAAcE,EAAEQ,OAAOF,Y,uBCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,0FAC0EC,UAC7FH,GAFmB,sBAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KACRC,QAAQC,IAAIF,GACNG,EAAOH,EAAKI,KAAI,SAACC,GAQrB,MAAO,CACLC,GAFED,EALFC,GAQAC,MAHEF,EAJFE,MAQAZ,IAJEU,EAHFG,OACEC,iBAAoBd,QAZL,kBAsBdQ,GAtBc,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOZ,EAAU,EAAVA,IACnC,OACE,yBAAKgB,UAAU,0CACb,yBAAKC,IAAKjB,EAAKkB,IAAKN,EAAOO,OAAO,QAClC,2BAAIP,KCFGQ,EAAU,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNgB,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACR3B,EAAQC,GAAU2B,MAAK,SAACC,GACtBH,EAAS,CACPlB,KAAMqB,EACNL,SAAS,SAGZ,CAACvB,IAEGwB,EDb2BK,CAAa7B,GAAjCe,EADyB,EAC/BR,KAAcgB,EADiB,EACjBA,QAEtB,OACE,oCACE,4BAAKvB,GACJuB,GAAW,yCACZ,yBAAKL,UAAU,aACZH,EAAOJ,KAAI,SAACC,GACX,OAAO,kBAAC,EAAD,eAAakB,IAAKlB,EAAIC,IAAQD,UEWhCmB,EApBM,WAAO,IAAD,EACW7C,mBAAS,CAAC,cADrB,mBAClBQ,EADkB,KACNT,EADM,KAGzB,OACE,oCACE,8CAEA,kBAAC,EAAD,CAAaA,cAAeA,IAE5B,6BAEA,4BACGS,EAAWiB,KAAI,SAACqB,GAAD,OACd,kBAAC,EAAD,CAASF,IAAKE,EAAIhC,SAAUgC,U,MCXtCC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.500ebc45.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInput = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInput} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default AddCategory;\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=KoMkE08IgMq4KL5ibLNsaZwYYvkj95N5&q=${encodeURI(\n    category\n  )}&limit=10`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  console.log(data);\n  const gifs = data.map((img) => {\n    const {\n      id,\n      title,\n      images: {\n        downsized_medium: { url },\n      },\n    } = img;\n    return {\n      id,\n      title,\n      url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} height=\"100\" />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loading && <p>Loading...</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => {\n          return <GifGridItem key={img.id} {...img} />;\n        })}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport AddCategory from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"One punch\"]);\n\n  return (\n    <>\n      <h2>Gif Expert App</h2>\n\n      <AddCategory setCategories={setCategories} />\n\n      <hr />\n\n      <ol>\n        {categories.map((el) => (\n          <GifGrid key={el} category={el} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}